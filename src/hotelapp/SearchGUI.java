/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelapp;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.UtilDateModel;

// comment2
/**
 *
 * @author robert
 */
public class SearchGUI extends javax.swing.JFrame {

    private UtilDateModel model;
    private DatePicker checkInDatePicker;
    private DatePicker checkOutDatePicker;
    private String checkInDate;
    private boolean checkInCalendarState;
    private boolean checkOutCalendarState;
    private String checkOutDate;

    public SearchGUI() {
        initComponents();
        hostelCmb.setVisible(false);
        bbCmb.setVisible(false);
        checkInCalendarState = false;
        checkOutCalendarState = false;
        checkInDate = "";
        checkInDatePicker = new DatePicker();
        checkOutDatePicker = new DatePicker();
        model = new UtilDateModel();
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        backgroundPanel.add(datePanel);
        backgroundPanel.revalidate();
        backgroundPanel.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                checkInCalendarState = false;
                checkInDatePicker.dispose();
                checkOutCalendarState = false;
                checkOutDatePicker.dispose();

            }
        });
        jScrollPane1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                checkInCalendarState = false;
                checkInDatePicker.dispose();
                checkOutCalendarState = false;
                checkOutDatePicker.dispose();

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        backgroundPanel = new javax.swing.JPanel();
        heaherPanel = new javax.swing.JPanel();
        manageRoomBtn = new javax.swing.JLabel();
        splitter1 = new javax.swing.JLabel();
        bookingsBtn = new javax.swing.JLabel();
        splitter2 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchTfBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchPanel = new javax.swing.JPanel();
        hotelCmb = new javax.swing.JComboBox<>();
        roomsCmb = new javax.swing.JComboBox<>();
        checkIn = new javax.swing.JButton();
        checkOut = new javax.swing.JButton();
        checkInDateLbl = new javax.swing.JLabel();
        checkOutDateLbl = new javax.swing.JLabel();
        accTypeCmb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        roomsLbl = new javax.swing.JLabel();
        hostelCmb = new javax.swing.JComboBox<>();
        bbCmb = new javax.swing.JComboBox<>();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        backgroundPanel.setBackground(new java.awt.Color(255, 255, 204));

        heaherPanel.setBackground(new java.awt.Color(153, 0, 51));
        heaherPanel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        manageRoomBtn.setFont(new java.awt.Font("FreeSans", 0, 24)); // NOI18N
        manageRoomBtn.setForeground(new java.awt.Color(255, 255, 204));
        manageRoomBtn.setText("Manage Room");
        manageRoomBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        manageRoomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manageRoomBtnMouseClicked(evt);
            }
        });

        splitter1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        splitter1.setForeground(new java.awt.Color(255, 255, 204));
        splitter1.setText("|");

        bookingsBtn.setFont(new java.awt.Font("FreeSans", 0, 24)); // NOI18N
        bookingsBtn.setForeground(new java.awt.Color(255, 255, 204));
        bookingsBtn.setText("Bookings");
        bookingsBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookingsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingsBtnMouseClicked(evt);
            }
        });

        splitter2.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        splitter2.setForeground(new java.awt.Color(255, 255, 204));
        splitter2.setText("|");

        searchBtn.setFont(new java.awt.Font("FreeSans", 0, 24)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(250, 250, 250));
        searchBtn.setText("Search");
        searchBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Look, book, manage");

        javax.swing.GroupLayout heaherPanelLayout = new javax.swing.GroupLayout(heaherPanel);
        heaherPanel.setLayout(heaherPanelLayout);
        heaherPanelLayout.setHorizontalGroup(
            heaherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(heaherPanelLayout.createSequentialGroup()
                .addGroup(heaherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(heaherPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(heaherPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(splitter2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookingsBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitter1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageRoomBtn)
                .addContainerGap())
        );
        heaherPanelLayout.setVerticalGroup(
            heaherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, heaherPanelLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(heaherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageRoomBtn)
                    .addComponent(splitter1)
                    .addComponent(bookingsBtn)
                    .addComponent(splitter2)
                    .addComponent(searchBtn))
                .addContainerGap())
            .addGroup(heaherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchTfBtn.setText("Search");
        searchTfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTfBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        searchPanel.setBackground(new java.awt.Color(255, 255, 204));
        searchPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 808, Short.MAX_VALUE)
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(searchPanel);

        hotelCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Simple", "Double", "King size" }));
        hotelCmb.setMinimumSize(new java.awt.Dimension(70, 20));
        hotelCmb.setPreferredSize(new java.awt.Dimension(70, 20));
        hotelCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotelCmbActionPerformed(evt);
            }
        });

        roomsCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        roomsCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomsCmbActionPerformed(evt);
            }
        });

        checkIn.setText("From");
        checkIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInActionPerformed(evt);
            }
        });

        checkOut.setText("Until");
        checkOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutActionPerformed(evt);
            }
        });

        checkInDateLbl.setText("Check in date");
        checkInDateLbl.setMaximumSize(new java.awt.Dimension(200, 15));
        checkInDateLbl.setMinimumSize(new java.awt.Dimension(90, 15));
        checkInDateLbl.setPreferredSize(new java.awt.Dimension(90, 15));

        checkOutDateLbl.setBackground(new java.awt.Color(255, 255, 255));
        checkOutDateLbl.setText("Check out date");
        checkOutDateLbl.setMaximumSize(new java.awt.Dimension(200, 15));
        checkOutDateLbl.setMinimumSize(new java.awt.Dimension(90, 15));
        checkOutDateLbl.setPreferredSize(new java.awt.Dimension(90, 15));

        accTypeCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hotel", "Hostel", "B&B" }));
        accTypeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accTypeCmbActionPerformed(evt);
            }
        });

        jLabel2.setText("Accomodation type:");

        jLabel3.setText("Room type:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("City");

        roomsLbl.setText("Rooms");

        hostelCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female", "Male", "Mixed" }));
        hostelCmb.setMinimumSize(new java.awt.Dimension(70, 20));
        hostelCmb.setPreferredSize(new java.awt.Dimension(70, 20));

        bbCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 guest", "2 guests", "3 guests" }));
        bbCmb.setMinimumSize(new java.awt.Dimension(70, 20));
        bbCmb.setPreferredSize(new java.awt.Dimension(70, 20));

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(heaherPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(checkIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkInDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkOutDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(accTypeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(roomsLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(roomsCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addComponent(bbCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hotelCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hostelCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchTfBtn)))
                        .addGap(69, 69, 69))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(328, Short.MAX_VALUE))))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addComponent(heaherPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(roomsLbl)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accTypeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bbCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hotelCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostelCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomsCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkIn)
                    .addComponent(checkInDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkOut)
                    .addComponent(checkOutDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTfBtn))
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void manageRoomBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageRoomBtnMouseClicked

        RoomGUI r = new RoomGUI();

        // Get the size of the active window
        int sizeH = this.getSize().height;
        int sizeW = this.getSize().width;

        // Get the location of the active window
        int currX = this.getLocation().x;
        int currY = this.getLocation().y;

        // Set the size of the new window
        r.setSize(sizeW, sizeH);

        // Set the location of the new window
        r.setLocation(currX, currY);

        // Hide the active window, show the new window
        this.dispose();

        // Set the window icon
        ImageIcon img = new ImageIcon("img/logo.png");
        r.setIconImage(img.getImage());

        r.setVisible(true);
    }//GEN-LAST:event_manageRoomBtnMouseClicked

    private void bookingsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingsBtnMouseClicked

        BookingsGUI b = new BookingsGUI();

        // Get the size of the active window
        int sizeH = this.getSize().height;
        int sizeW = this.getSize().width;

        // Get the location of the active window
        int currX = this.getLocation().x;
        int currY = this.getLocation().y;

        // Set the size of the new window
        b.setSize(sizeW, sizeH);

        // Set the location of the new window
        b.setLocation(currX, currY);

        // Hide the active window, show the new window
        this.dispose();

        // Set the window icon
        ImageIcon img = new ImageIcon("img/logo.png");
        b.setIconImage(img.getImage());

        b.setVisible(true);

    }//GEN-LAST:event_bookingsBtnMouseClicked

    private void searchTfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTfBtnActionPerformed

        String searchTerm = " ";

        int yLoc; // Will the Y position of each generated panel
        int searchPanelYSize; // Will dynamically adjust the total height of the main search panel to accomodate for all the elements
        int resultPanelHeight = 100;
        int resultPanelMargin = 20; // To be taken out
        int backgroundPanelWidth = backgroundPanel.getSize().width;

        searchPanel.removeAll(); // Resetting the search results on every search
        searchPanel.revalidate();
        searchPanel.repaint();

        ArrayList<String[]> results = new ArrayList<String[]>(); // This array list will store the results

        if (accTypeCmb.getSelectedItem().toString().equals("Hotel")) { // If searching for a hotel room ...

            // Initiating the file stream for reading from the hotels.data file inside the hotels array list
            File fName;
            FileInputStream fStream;
            ObjectInputStream oStream;
            ArrayList<Hotel> hotels = new ArrayList<>();

            try {
                fName = new File("hotels.data");
                fStream = new FileInputStream(fName);
                oStream = new ObjectInputStream(fStream);
                hotels = (ArrayList<Hotel>) oStream.readObject();

                // Looping through the hotels arraylist
                for (Hotel x : hotels) {
                    // Finding the match within the hotels arraylist
                    if (x.getBedType().equals(hotelCmb.getSelectedItem().toString())) {
                        String[] result = {x.getRoomID(), x.getRoomName(), x.getRoomCity(), x.getRoomAddress(), // 0 - 3
                            "Price per night", String.valueOf(x.getRoomPricePerNight()), // 4 - 5
                            "KM from city centre", String.valueOf(x.getKmFromCityCentre()), // 6 - 7
                            "Max number of guests", String.valueOf(x.getMaxNumberGuests()), // 8 - 9
                            "Parking", String.valueOf(x.hasParkingSpace()), // 10 - 11 
                            "Breakfast", String.valueOf(x.hasBreakfastIncl()), // 12 - 13
                            "24h Reception", String.valueOf(x.has24HReception()), // 14 - 15
                            "Balcony", String.valueOf(x.hasBalcony()), // 16 - 17
                            "Bathtub", String.valueOf(x.hasBathtub()), // 18 - 19
                            "Pool", String.valueOf(x.hasPool()), // 20 - 21
                            "Room service", String.valueOf(x.hasRoomService()), // 22 - 23 
                            "Minibar", String.valueOf(x.hasMinibar()), // 24 - 25
                            "Restaurant", String.valueOf(x.hasRestaurant()), // 26 - 27
                            "Gym", String.valueOf(x.hasGym())}; // 28 - 29
                        results.add(result); // Storing the results as arrays within the results array list
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
            } catch (ClassNotFoundException x) {
                System.out.println(x);
            }

            System.out.println(results.get(0));
        }

        if (accTypeCmb.getSelectedItem().toString().equals("Hostel")) { // If searching for a hostel room ...

            // Initiating the file stream for reading from the hostels.data file inside the hostels array list
            File fName;
            FileInputStream fStream;
            ObjectInputStream oStream;
            ArrayList<Hostel> hostels = new ArrayList<>();

            try {
                fName = new File("hostels.data");
                fStream = new FileInputStream(fName);
                oStream = new ObjectInputStream(fStream);
                hostels = (ArrayList<Hostel>) oStream.readObject();

                // Looping through the hotels arraylist
                for (Hostel x : hostels) {
                    // Finding the match within the hotels arraylist
                    if (x.getDormType().equals(hostelCmb.getSelectedItem().toString())) {
                        String[] result = {x.getRoomID(), x.getRoomName(), x.getRoomCity(), x.getRoomAddress(), // 0 - 3
                            "Price per night", String.valueOf(x.getRoomPricePerNight()), // 4 - 5
                            "KM from city centre", String.valueOf(x.getKmFromCityCentre()), // 6 - 7
                            "Max number of guests", String.valueOf(x.getMaxNumberGuests()), // 8 - 9
                            "Parking", String.valueOf(x.hasParkingSpace()), // 10 - 11 
                            "Breakfast", String.valueOf(x.hasBreakfastIncl()), // 12 - 13
                            "24h Reception", String.valueOf(x.has24HReception()), // 14 - 15
                            "Lockers", String.valueOf(x.hasLockers()), // 16 - 17
                            "Private bathroom", String.valueOf(x.hasPrivateBathroom()), // 18 - 19
                            "Washing machine", String.valueOf(x.hasWashingMachine()), // 20 - 21
                            "Private rooms", String.valueOf(x.hasPrivateRooms()), // 22 - 23 
                            "Bar", String.valueOf(x.hasBar()), // 24 - 25
                            "Shared kitchen", String.valueOf(x.hasSharedKitchen()), // 26 - 27
                            "Long stay", String.valueOf(x.hasLongStayOption())}; // 28 - 29
                        results.add(result); // Storing the results as arrays within the results array list
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
            } catch (ClassNotFoundException x) {
                System.out.println(x);
            }

            System.out.println(results.get(0));
        }
        
        if (accTypeCmb.getSelectedItem().toString().equals("B&B")) { // If searching for a hostel room ...

            // Initiating the file stream for reading from the hostels.data file inside the hostels array list
            File fName;
            FileInputStream fStream;
            ObjectInputStream oStream;
            ArrayList<BedAndBreakfast> bAndB = new ArrayList<>();

            try {
                fName = new File("bedandbreakfast.data");
                fStream = new FileInputStream(fName);
                oStream = new ObjectInputStream(fStream);
                bAndB = (ArrayList<BedAndBreakfast>) oStream.readObject();

                // Looping through the hotels arraylist
                String[] parts;
                // Get just the number for the bedNo, not the whole string
                parts = bbCmb.getSelectedItem().toString().split(" ");
                String bedNo = parts[0];
                
                for (BedAndBreakfast x : bAndB) {
                    // Finding the match within the hotels arraylist
                    if (String.valueOf(x.getNumberBedrooms()).equals(bedNo)) {
                        String[] result = {x.getRoomID(), x.getRoomName(), x.getRoomCity(), x.getRoomAddress(), // 0 - 3
                            "Price per night", String.valueOf(x.getRoomPricePerNight()), // 4 - 5
                            "KM from city centre", String.valueOf(x.getKmFromCityCentre()), // 6 - 7
                            "Max number of guests", String.valueOf(x.getMaxNumberGuests()), // 8 - 9
                            "Parking", String.valueOf(x.hasParkingSpace()), // 10 - 11 
                            "Breakfast", String.valueOf(x.hasBreakfastIncl()), // 12 - 13
                            "24h Reception", String.valueOf(x.has24HReception()), // 14 - 15
                            "Lockers", String.valueOf(x.hasLockers()), // 16 - 17
                            "Private bathroom", String.valueOf(x.hasPrivateBathroom()), // 18 - 19
                            "Washing machine", String.valueOf(x.hasWashingMachine()), // 20 - 21
                            "Private rooms", String.valueOf(x.hasPrivateRooms()), // 22 - 23 
                            "Bar", String.valueOf(x.hasBar()), // 24 - 25
                            "Shared kitchen", String.valueOf(x.hasSharedKitchen()), // 26 - 27
                            "Long stay", String.valueOf(x.hasLongStayOption())}; // 28 - 29
                        results.add(result); // Storing the results as arrays within the results array list
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
            } catch (ClassNotFoundException x) {
                System.out.println(x);
            }

            System.out.println(results.get(0));
        }


        yLoc = 20;
        for (String[] r : results) {

            //yLoc = i * (resultPanelHeight + resultPanelMargin); // 70 pixels distance between each point - each panel is 50 pixels tall, so that will leave 20 pixels between panels
            yLoc = yLoc + 150;
            searchPanelYSize = yLoc + 70; // Total height will make sure to leave 20 pixels margin between the last element and the bottom edge of the window

            // Setup the result panel
            JPanel resultPanel = new JPanel();
            resultPanel.setBounds(50, yLoc, backgroundPanelWidth / 2, resultPanelHeight);
            resultPanel.setLayout(null); // Set resultPanel to null to allow the labels to be placed with relative positioning.

            resultPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR)); // Set the cursor on mouse over
            resultPanel.setBackground(new Color(153, 0, 51)); // Search panel result background

            // Next block will make the result panels clickable, with a variable passed to them
            //final int resultNo = i; // In order to pass a variable to a class, it has to be first converted to a final
            // Adding the mouse event listener to the generated panel
            resultPanel.addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    System.out.println("This is entry " + searchTerm + " " + r[0]);
                }
            });

            // Setup the result label
            String resultString = "";
            for (int i = 0; i < r.length; i++) {
                if (r[i].equals("true")) {
                    resultString = resultString + " " + "✓";
                } else if (r[i].equals("false")) {
                    resultString = resultString + " " + "x";
                } else {
                    resultString = resultString + " " + r[i];
                }
            }
            System.out.println(resultString);
            JLabel resultLabel = new JLabel(r[0] + " " + r[1] + " " + r[2] + " " + r[3] + " " + r[4] + " " + r[5] + " " + r[6] + " " + r[7] + " " + r[8]);
            resultLabel.setForeground(new Color(255, 255, 204)); // Result Label font color
            resultLabel.setBounds(20, 15, 200, 20); // Position and width of the text within the resultPanel

            // Add result label to the result panel, add the result panel to the search panel
            resultPanel.add(resultLabel);
            searchPanel.add(resultPanel);

            searchPanel.setPreferredSize(new Dimension(600, searchPanelYSize + resultPanelHeight));
            searchPanel.revalidate();

        }

        checkInCalendarState = false;
        checkInDatePicker.dispose();
        checkOutCalendarState = false;
        checkOutDatePicker.dispose();
    }//GEN-LAST:event_searchTfBtnActionPerformed

    private void checkInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInActionPerformed
        // TODO add your handling code here:

        checkInDatePicker.dispose();
        checkOutDatePicker.dispose();
        if (!checkInCalendarState || checkOutCalendarState) {
            checkInCalendarState = true;
            checkOutCalendarState = false;
            checkInDatePicker.setUndecorated(true);
            checkInDatePicker.setLocation(checkIn.getLocation().x + this.getLocation().x, checkIn.getLocation().y + 60 + this.getLocation().y);
            checkInDatePicker.setVisible(true);
            checkInDatePicker.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    checkInDateLbl.setText(checkInDatePicker.getSelectedDate());
                    checkInDateLbl.revalidate();
                }
            });
        } else {
            checkInCalendarState = false;
            checkInDatePicker.dispose();
        }


    }//GEN-LAST:event_checkInActionPerformed

    private void checkOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutActionPerformed

        checkOutDatePicker.dispose();
        checkInDatePicker.dispose();
        if (!checkOutCalendarState || checkInCalendarState) {
            checkOutCalendarState = true;
            checkInCalendarState = false;
            checkOutDatePicker.setUndecorated(true);
            checkOutDatePicker.setLocation(checkOut.getLocation().x + this.getLocation().x, checkOut.getLocation().y + 60 + this.getLocation().y);
            checkOutDatePicker.setVisible(true);
            checkOutDatePicker.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    checkOutDateLbl.setText(checkOutDatePicker.getSelectedDate());
                    checkOutDateLbl.revalidate();
                }
            });
        } else {
            checkOutCalendarState = false;
            checkOutDatePicker.dispose();
        }

    }//GEN-LAST:event_checkOutActionPerformed

    private void roomsCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomsCmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomsCmbActionPerformed

    private void accTypeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accTypeCmbActionPerformed
        // TODO add your handling code here:
        switch (accTypeCmb.getSelectedItem().toString()) {
            case "Hotel":
                hotelCmb.setVisible(true);
                hostelCmb.setVisible(false);
                bbCmb.setVisible(false);
                break;
            case "Hostel":
                hotelCmb.setVisible(false);
                hostelCmb.setVisible(true);
                bbCmb.setVisible(false);
                break;
            default:
                hotelCmb.setVisible(false);
                hostelCmb.setVisible(false);
                bbCmb.setVisible(true);
                break;
        }

    }//GEN-LAST:event_accTypeCmbActionPerformed

    private void hotelCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotelCmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hotelCmbActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accTypeCmb;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JComboBox<String> bbCmb;
    private javax.swing.JLabel bookingsBtn;
    private javax.swing.JButton checkIn;
    private javax.swing.JLabel checkInDateLbl;
    private javax.swing.JButton checkOut;
    private javax.swing.JLabel checkOutDateLbl;
    private javax.swing.JPanel heaherPanel;
    private javax.swing.JComboBox<String> hostelCmb;
    private javax.swing.JComboBox<String> hotelCmb;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageRoomBtn;
    private javax.swing.JComboBox<String> roomsCmb;
    private javax.swing.JLabel roomsLbl;
    private javax.swing.JLabel searchBtn;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton searchTfBtn;
    private javax.swing.JLabel splitter1;
    private javax.swing.JLabel splitter2;
    // End of variables declaration//GEN-END:variables
}

